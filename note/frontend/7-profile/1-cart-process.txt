==============================
(1)Show-All-Carts (Auth::user)
==============================
Route::get('/carts','Api\CartApi@showCart');

public function showCart(Request $request){
   $user_id = $request->user_id;
   $carts = ProductCart::where('user_id',$user_id)
   ->with('product')
   ->get();
   return response()->json([
      'message' => true,
      'data' => $carts,
   ]);
}

##Profile/Cart.jsx##
const [loader, setLoader] = useState(true);
const [cart, setCart] = useState([]);

useEffect(() => {
   const user_id = window.auth.id;
   axios.get("/api/carts?user_id=" + user_id).then(({ data }) => {
      setCart(data.data);
      setLoader(false);
   });
}, []);

//MainContent
{loader && <Spinner />}
{!loader && (
   {cart.map((d)=>(
       <p>Image</p>
       <p>Name</p>
       <p>Price</p>
       <p>Qty</p>
       <p>(-) or (+) and (save)</p>
       <p>Remove-btn</p>
   ))}
)}


===============================
(2)Cart-Qty-Add-Reduce-Process 
===============================
[minus-Btn].onClick(  ()=>updateQty(d.id,'minus')  );
[plus-Btn].onClick(  ()=>updateQty(d.id,'plus')  );
const updateQty = ()=>{
    const updatedQty = cart.map((d) => {
      // console.log(d);
      if (id === d.id) {
            switch (type) {
               case "add":
                  d.total_qty += 1 && d.total_qty < 10;
                  break;

               default:
                  d.total_qty -= 1 && d.total_qty > 1;
                  break;
            }
      }
      return d;
   });
   setCart(updatedQty);
}


===============================
(3)Save-Change-Cart-Qty-To-DB
===============================
Route::post('/store-carts','Api\CartApi@storeCart');

public function storeCart(Request $request){
   $cart_id = $request->cart_id;
   $total_qty = $request->total_qty;

   $cart = ProductCart::where('id',$cart_id);
   $cart->update([
      'total_qty' => $total_qty,
   ]);
   return response()->json([
      'message' => true,
      'data' => null,
   ]);
}

const [miniloader,setMiniLoader] = useState(false)

[save-Btn].onClick(()=>saveCart(d.id,d.total_qty))

const saveCart = (id, qty) => {
   setMiniLoader(id);
   axios
      .post("/api/store-carts/", {
            cart_id: id,
            total_qty: qty,
      })
      .then(({ data }) => {
            if (data.message === true) {
               showToast("Cart Quantity Saved");
               setMiniLoader(false);
            }
      });
};

<button
   className="btn btn-sm btn-primary" 
   disabled={miniloader} 
   onClick={() => saveCart(d.id, d.total_qty)}
>
   {d.id === miniloader && (
         <MiniSpinner />
   )}

   save
</button>

===============================
(3)Destroy-Cart-From-DB
===============================
Route::post('/destroy-carts','Api\CartApi@destroyCart');

public function destroyCart(Request $request){
   $cart_id = $request->cart_id;
   $cart = ProductCart::where('id',$cart_id);
   $cart->delete();
   return response()->json([
      'message' => true,
      'data' => null
   ]);
}

<button
   className="btn btn-sm btn-danger"
   onClick={() => destroyCart(d.id)}
>
   <i className="fas fa-trash"></i>
</button>


const destroyCart = (id) => {
   axios.post("/api/destroy-carts/", { cart_id: id }).then(({ data }) => {
      if (data.message === true) {
            setCart((preCart) => preCart.filter((d) => d.id !== id));
            showToast("Product Removed From Cart");
      }
   });
};


===============================
(4)All-Total-Price
===============================
const TotalPrice = () => {
   var total_price = 0;
   cart.map((d) => (total_price += d.total_qty * d.product.sale_price));
   return total_price;
};


<tr>
   <td colSpan={6}  className="text-right text-warning">
         Total Price :
   </td>
   <td className="text-warning">
         <TotalPrice /> Ks
   </td>
</tr>


====================================
(5)Checkout-Process
====================================
<button  onClick={() => checkOut()}>
      Checkout
</button>


Route::get('/checkout','Api\CartApi@checkOut');
public function checkOut(Request $request){
   $user_id = $request->user_id;

   //find-user-carts_and_store
   $user_carts = ProductCart::where('user_id',$user_id)->get();
   foreach($user_carts as $cart){
      ProductOrder::create([
            'user_id' => $cart->user_id,
            'product_id' => $cart->product_id,
            'total_qty' => $cart->total_qty,
      ]);
   }

   //user-cart-delete
   ProductCart::where('user_id',$user_id)->delete();
   return response()->json([
      'message' => true,
      'data' => null
   ]);
}

const checkOut = () => {
   setMiniLoader(true);
   const user_id = window.auth.id;
   axios.get(`/api/checkout?user_id=${user_id}`).then(({ data }) => {
      if (data.message === true) {
            setCart([]);
            window.updateCart(0);
            showToast(
               "Checkout Success.Please wait Admin approve.Check in order list"
            );
            setMiniLoader(false);
      }
   });
};